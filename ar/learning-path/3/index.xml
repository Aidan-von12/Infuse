<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Analyzing Malware on Infuse</title><link>https://openinternet.github.io/infuse/ar/learning-path/3/</link><description>Recent content in Analyzing Malware on Infuse</description><generator>Hugo</generator><language>ar</language><atom:link href="https://openinternet.github.io/infuse/ar/learning-path/3/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://openinternet.github.io/infuse/ar/learning-path/3/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openinternet.github.io/infuse/ar/learning-path/3/introduction/</guid><description>Overview This learning path will prepare you to start on the journey of analyzing malware. Note that this is one of the hardest areas of security to master, but incremental progress will give results. The general goal of malware analysis is to characterize new malware, both brand new malware and variants of existing ones. The desired end result is a characterization of the capabilities of the malware, a guess at what threat actor(s) is using it, and a set of IoCs (indicators of compromise) that will allow others to detect the malware.</description></item><item><title>Setting up a malware analysis environment</title><link>https://openinternet.github.io/infuse/ar/learning-path/3/module-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openinternet.github.io/infuse/ar/learning-path/3/module-1/</guid><description>Use Case Before you start analyzing any malware, you need to set up a safe environment to do so. Definitionally, malware does bad things to the systems it runs on. You do not want to run it on your primary system. Additionally, you likely will want to prevent the malware from actually making connections to the threat actor’s C&amp;amp;C (command and control) servers. Both of these mean that you should set up a virtual machine to use when performing malware analysis.</description></item><item><title>Basic file analysis</title><link>https://openinternet.github.io/infuse/ar/learning-path/3/module-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openinternet.github.io/infuse/ar/learning-path/3/module-2/</guid><description>Use Case Once you have a piece of malware on your analysis VM, the next step is to figure out what’s in it. A piece of malware may use multiple files; in this case you would use the techniques in this section for each file. There are a few different ways to get an idea of what kind of file you’re dealing with. Note that some malware is tricky about this, hiding malicious content in innocuous files or making files that are several valid types at once (a classic example being the GIFAR, which is a file that is both a valid image and also a valid Java applet).</description></item><item><title>Sandboxes and dynamic analysis</title><link>https://openinternet.github.io/infuse/ar/learning-path/3/module-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openinternet.github.io/infuse/ar/learning-path/3/module-3/</guid><description>Use Case Dynamic analysis is the process of running a piece of malware and observing what it does. The easiest way of doing dynamic analysis is by running a piece of software in a sandbox. A sandbox is a safe, isolated environment which opens a potentially malicious file, URL, or program and generates a huge amount of data on it. This subtopic looks at sandbox analysis, what it can and cannot do, and how to do it.</description></item><item><title>Static analysis</title><link>https://openinternet.github.io/infuse/ar/learning-path/3/module-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openinternet.github.io/infuse/ar/learning-path/3/module-4/</guid><description>Use Case Static analysis is the process of disassembling a binary file in order to understand what’s inside it. It’s quite labor-intensive and requires software engineering knowledge. For this reason, most analysts will prefer to do dynamic analysis (which we focus on in Subtopic 3) instead. There are several reasons you might want to do static analysis, including when dynamic analysis isn’t yielding good results or if you do not want a potential adversary to know that you are in possession of and analyzing the file.</description></item><item><title>Creating and sharing IoCs</title><link>https://openinternet.github.io/infuse/ar/learning-path/3/module-5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openinternet.github.io/infuse/ar/learning-path/3/module-5/</guid><description>Use Case Once you have analyzed a piece of malware, you can help the community (and also yourself and the rest of the world) by sharing your findings. Novel malware is reasonably rare, and once used, it tends to be re-used extensively. By sharing your findings, you can help everyone in several ways:
If a member of the community has been targeted by a threat actor, it’s quite possible that the threat actor is targeting other members of the community.</description></item></channel></rss>